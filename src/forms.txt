import React from 'react';
import { useNavigate, useLocation } from 'react-router-dom';

const coins = [
    { id: 1, name: 'Toncoin', logo: './toncoin.png', symbol: 'TON' },
    { id: 2, name: 'Tether', logo: './tether.png', symbol: 'USDT' },
    { id: 3, name: 'Notcoin', logo: './notcoin.png', symbol: 'NOT' },
    { id: 4, name: 'Bitcoin', logo: './bitcoin.png', symbol: 'BTC' },
    { id: 5, name: 'Ethereum', logo: './etherium.png', symbol: 'ETH' },
    { id: 6, name: 'Solana', logo: './solana.png', symbol: 'SOL' },
    { id: 7, name: 'TRON', logo: './tron.png', symbol: 'TRX' },
    { id: 8, name: 'Dogecoin', logo: './dogecoin.png', symbol: 'DOGE' },
];

const CoinList = () => {
    const location = useLocation();
    const navigate = useNavigate();
    const { type, coinTo, coinFrom, isFrom } = location.state;

    let title;
    let link;

    switch (type) {
        case 'deposit':
            title = 'ПОПОЛНЕНИЕ КРИПТОВАЛЮТЫ';
            link = '/deposit';
            break;
        case 'withdraw':
            title = 'ВЫВОД КРИПТОВАЛЮТЫ';
            link = '/withdraw';
            break;
        case 'exchange':
            title = 'ОБМЕН КРИПТОВАЛЮТЫ';
            link = '/exchange';
            break;
        default:
            throw new Error(`Неизвестный тип: ${type}`);
    }

    return (
        <div className="p-4 mt-40">
            <div className="text-3xl font-bold mb-8 text-gray-400">{title}</div>
            <div className="flex flex-col">
                {coins.filter((c) => !isFrom ?
                    (!coinFrom || c.symbol !== coinFrom.symbol) :
                    (!coinTo || c.symbol !== coinTo.symbol)
                ).map((coin, index) => (
                    <div>
                        <button
                            onClick={() =>
                                navigate(link, {
                                    state: {currency: coin.symbol,//first selected coin
                                            isFrom: isFrom,
                                            coinTo: coinTo,
                                            coinFrom: coinFrom},//second selected coin for exchange

                                })
                            }
                            key={coin.id}
                            className="flex items-center justify-between mb-8">
                            <div className="flex items-center">
                                <div className="rounded-full w-24 h-24 flex items-center justify-center mr-4">
                                    <img alt={`${coin.name} logo`} className="w-24 h-24" src={coin.logo}/>
                                </div>
                                <div>
                                    <div className="flex justify-between items-center">
                                        <div className="text-4xl">{coin.symbol}</div>
                                    </div>
                                    <div className="text-gray-400 text-3xl">
                                        <div className="text-gray-400">{coin.name}</div>
                                    </div>
                                </div>
                            </div>
                        </button>
                        {index < coins.length - 1 && (
                            <div className="border-b border-gray-600 opacity-50 mb-4 mt-4 ml-28"></div>
                        )}
                    </div>
                ))}
            </div>
        </div>
    );
};

export default CoinList;

import React, {useEffect} from 'react';
import { useLocation, useNavigate } from 'react-router-dom';

const currencies = [
    { symbol: '₽', name: 'RUB', description: 'Российский рубль' },
    { symbol: '$', name: 'USD', description: 'Доллар США' },
    { symbol: '€', name: 'EUR', description: 'Евро' },
    { symbol: 'Br', name: 'BYN', description: 'Белорусский рубль' },
    { symbol: '₴', name: 'UAH', description: 'Украинская гривна' },
    { symbol: '£', name: 'GBP', description: 'Британский фунт' },
    { symbol: '¥', name: 'CNY', description: 'Китайский юань' },
    { symbol: '₸', name: 'KZT', description: 'Казахстанский тенге' },
    { symbol: 'сум', name: 'UZS', description: 'Узбекский сум' },
    { symbol: '₾', name: 'GEL', description: 'Грузинский лари' },
    { symbol: '₺', name: 'TRY', description: 'Турецкая лира' },
    { symbol: '֏', name: 'AMD', description: 'Армянский драм' },
    { symbol: '฿', name: 'THB', description: 'Таиландский бат' },
    { symbol: '₹', name: 'INR', description: 'Индийская рупия' },
    { symbol: 'R$', name: 'BRL', description: 'Бразильский реал' },
    { symbol: 'Rp', name: 'IDR', description: 'Индонезийская рупия' },
    { symbol: '₼', name: 'AZN', description: 'Азербайджанский манат' },
    { symbol: 'د.إ', name: 'AED', description: 'Объединенные Арабские Эмираты дирхам' },
    { symbol: 'zł', name: 'PLN', description: 'Польский злотый' },
    { symbol: '₪', name: 'ILS', description: 'Израильский шекель' },
    { symbol: 'с', name: 'KGS', description: 'Киргизский сом' },
    { symbol: 'ЅМ', name: 'TJS', description: 'Таджикский сомони' },
];

function CurrencySelector() {
    const [selectedCurrency, setSelectedCurrency] = React.useState(null);
    const location = useLocation();
    const navigate = useNavigate();

    useEffect(() => {
        setSelectedCurrency(location.state.currentCurrency);
    }, [location.state.currentCurrency]);

    const handleCurrencySelect = (currency) => {
        setSelectedCurrency(currency);
        navigate('/', { state: { currentCurrency: currency } });
    };

    return (
        <div className="mx-auto p-8">
            <h1 className="text-gray-400 text-2xl mb-8">
                БАЗОВАЯ ВАЛЮТА
            </h1>
            <div className="space-y-8">
                {currencies.map((currency,index) => (
                    <div key={currency.name}>
                        <div className="flex items-center justify-between cursor-pointer"
                         onClick={() => handleCurrencySelect(currency.name)}>
                        <div className="flex items-center space-x-8">
                            <div className="bg-gray-700 w-24 h-24 rounded-full text-4xl flex items-center justify-center">
                                <b>{currency.symbol}</b>
                            </div>
                            <div>
                                <div className="text-3xl">
                                    {currency.name}
                                </div>
                                <div className="text-gray-400 text-2xl">
                                    {currency.description}
                                </div>
                            </div>
                        </div>
                       {selectedCurrency === currency.name && (
                            <div className="rounded-full w-24 h-24 flex items-center justify-center">
                                <i className="fas fa-check-circle text-4xl text-blue-400" />
                            </div>
                        )}
                    </div>
                    {index < currencies.length - 1 && (
                        <div className="border-b border-gray-600 opacity-50 mb-4 mt-4 ml-32"></div>
                    )}
                    </div>
                ))}
            </div>
        </div>
    );
}

export default CurrencySelector;

import React from 'react';
import { useLocation } from 'react-router-dom';
import { QRCodeCanvas } from 'qrcode.react';

const coins = [
    { id: 1, name: 'Toncoin', logo: './toncoin.png', symbol: 'TON', network: 'The Open Network(TON)' },
    { id: 2, name: 'Tether', logo: './tether.png', symbol: 'USDT', network: 'The Open Network(TON)' },
    { id: 3, name: 'Notcoin', logo: './notcoin.png', symbol: 'NOT', network: 'The Open Network(TON)' },
    { id: 4, name: 'Bitcoin', logo: './bitcoin.png', symbol: 'BTC', network: 'Bitcoin' },
    { id: 5, name: 'Ethereum', logo: './etherium.png', symbol: 'ETH', network: 'Ethereum' },
    { id: 6, name: 'Solana', logo: './solana.png', symbol: 'SOL', network: 'Solana' },
    { id: 7, name: 'TRON', logo: './tron.png', symbol: 'TRX', network: 'TRON' },
    { id: 8, name: 'Dogecoin', logo: './dogecoin.png', symbol: 'DOGE', network: 'DOGE' },
];

const DepositPage = () => {
    const location = useLocation();
    const { currency } = location.state || {};

    const qrCodeData = `https://example.com/deposit/${currency}`;
    const qrCodeOptions = {
        size: 550,
        level: 'H',
        color: {
            dark: '#ffffff',
            light: '#0a1726',
        },
        shapeRendering: 'crispEdges',
        imageSettings: {
            src: `${coins.find((coin) => coin.symbol === currency).logo}`,
            x: null,
            y: null,
            height: 150,
            width: 150,
            excavate: true,
        },
        dotScale: 0.8,
        dotAspect: 1.2,
    };

    // const handleCopyClick = () => {
    //     navigator.clipboard.writeText(qrCodeData);
    //     alert('QR code copied to clipboard!');
    // };

    return (
        <div>
            <div className="pt-48 pl-48 pr-48 pb-16">
                <div className="bg-gray-800 rounded-lg p-8 mb-4">
                    <QRCodeCanvas
                        value={qrCodeData}
                        size={qrCodeOptions.size}
                        level={qrCodeOptions.level}
                        fgColor={qrCodeOptions.color.light}
                        bgColor={qrCodeOptions.color.dark}
                        shapeRendering={qrCodeOptions.shapeRendering}
                        imageSettings={qrCodeOptions.imageSettings}
                        dotScale={qrCodeOptions.dotScale}
                        dotAspect={qrCodeOptions.dotAspect}
                        style={{ borderRadius: 20 }}
                    />
                    <p className="text-center text-2xl text-gray-400 mb-2 mt-4">
                        Отправляйте только
                        <i content={`${coins.find((coin) => coin.symbol === currency).logo}`} className="w-16 h-16" />
                        <span className="font-bold"> {currency} </span>
                        через сеть
                        <span> {coins.find((coin) => coin.symbol === currency).network}</span>
                        , иначе монеты будут утеряны.
                    </p>
                </div>
            </div>
            <div className="text-center mb-20 text-4xl">
                <p className="text-gray-400">
                    Transaction Address
                </p>
                <p className="text-white font-mono mt-8">
                    UQCXJvvom3Z1GuOUVYnDYU6e1862
                    <br />
                    WHR9ZI9HeuECW113d1T
                </p>
            </div>
            <div className="flex justify-center space-x-4 mb-16 mt-12">
                <button className="bg-gradient-to-r from-blue-500 to-blue-700 text-white text-4xl py-2 px-16 rounded-xl flex items-center space-x-2">
                    <i className="fas fa-share"></i>
                    <span>Поделиться</span>
                </button>
                <button className="bg-gradient-to-r from-blue-500 to-blue-700 text-white text-4xl py-3 px-16 rounded-xl flex items-center space-x-2">
                    <i className="fas fa-copy"></i>
                    <span>Копировать</span>
                </button>
            </div>
            <div className="flex justify-center text-center mt-12">
                <button className="bg-gradient-to-r from-blue-400 to-blue-600 rounded-3xl text-white text-4xl py-2 px-16 flex items-center space-x-2">
                    <i className="fas fa-plus"></i>
                    <span>Получить новый адрес</span>
                </button>
            </div>
        </div>
    );
};

export default DepositPage;

//
// // все константы в проекте требующие хранения в базе данных
//
// const coins = [
//     { id: 1, name: 'Toncoin', logo: './toncoin.png', symbol: 'TON', network: 'The Open Network(TON)' },
//     { id: 2, name: 'Tether', logo: './tether.png', symbol: 'USDT', network: 'The Open Network(TON)' },
//     { id: 3, name: 'Notcoin', logo: './notcoin.png', symbol: 'NOT', network: 'The Open Network(TON)' },
//     { id: 4, name: 'Bitcoin', logo: './bitcoin.png', symbol: 'BTC', network: 'Bitcoin' },
//     { id: 5, name: 'Ethereum', logo: './etherium.png', symbol: 'ETH', network: 'Ethereum' },
//     { id: 6, name: 'Solana', logo: './solana.png', symbol: 'SOL', network: 'Solana' },
//     { id: 7, name: 'TRON', logo: './tron.png', symbol: 'TRX', network: 'TRON' },
//     { id: 8, name: 'Dogecoin', logo: './dogecoin.png', symbol: 'DOGE', network: 'DOGE' },
// ];
//
//
// const userBalances = {
//     TON: 1,
//     USDT: 500,
//     NOT: 80,
//     BTC: 0.00015,
//     ETH: 0.003,
//     SOL: 0.01,
//     TRX: 1000,
//     DOGE: 7,
// };
//
// const currencies = [
//     { symbol: '₽', name: 'RUB', description: 'Российский рубль' },
//     { symbol: '$', name: 'USD', description: 'Доллар США' },
//     { symbol: '€', name: 'EUR', description: 'Евро' },
//     { symbol: 'Br', name: 'BYN', description: 'Белорусский рубль' },
//     { symbol: '₴', name: 'UAH', description: 'Украинская гривна' },
//     { symbol: '£', name: 'GBP', description: 'Британский фунт' },
//     { symbol: '¥', name: 'CNY', description: 'Китайский юань' },
//     { symbol: '₸', name: 'KZT', description: 'Казахстанский тенге' },
//     { symbol: 'сум', name: 'UZS', description: 'Узбекский сум' },
//     { symbol: '₾', name: 'GEL', description: 'Грузинский лари' },
//     { symbol: '₺', name: 'TRY', description: 'Турецкая лира' },
//     { symbol: '֏', name: 'AMD', description: 'Армянский драм' },
//     { symbol: '฿', name: 'THB', description: 'Таиландский бат' },
//     { symbol: '₹', name: 'INR', description: 'Индийская рупия' },
//     { symbol: 'R$', name: 'BRL', description: 'Бразильский реал' },
//     { symbol: 'Rp', name: 'IDR', description: 'Индонезийская рупия' },
//     { symbol: '₼', name: 'AZN', description: 'Азербайджанский манат' },
//     { symbol: 'د.إ', name: 'AED', description: 'Объединенные Арабские Эмираты дирхам' },
//     { symbol: 'zł', name: 'PLN', description: 'Польский злотый' },
//     { symbol: '₪', name: 'ILS', description: 'Израильский шекель' },
//     { symbol: 'с', name: 'KGS', description: 'Киргизский сом' },
//     { symbol: 'ЅМ', name: 'TJS', description: 'Таджикский сомони' },
// ];
//
// const MIN_WITHDRAWAL = {
//     TON: 0.09,
//     USDT: 1,
//     NOT: 80,
//     BTC: 0.00015,
//     ETH: 0.003,
//     SOL: 0.01,
//     TRX: 10,
//     DOGE: 7,
// };
//

import React, {useState, useEffect, useCallback} from 'react';
import { useNavigate, useLocation } from 'react-router-dom';

const coins = [
    { id: 1, name: 'Toncoin', logo: './toncoin.png', symbol: 'TON' },
    { id: 2, name: 'Tether', logo: './tether.png', symbol: 'USDT' },
    { id: 3, name: 'Notcoin', logo: './notcoin.png', symbol: 'NOT' },
    { id: 4, name: 'Bitcoin', logo: './bitcoin.png', symbol: 'BTC' },
    { id: 5, name: 'Ethereum', logo: './etherium.png', symbol: 'ETH' },
    { id: 6, name: 'Solana', logo: './solana.png', symbol: 'SOL' },
    { id: 7, name: 'TRON', logo: './tron.png', symbol: 'TRX' },
    { id: 8, name: 'Dogecoin', logo: './dogecoin.png', symbol: 'DOGE' },
];

const userBalances = {
    TON: 1,
    USDT: 500,
    NOT: 80,
    BTC: 0.00015,
    ETH: 0.003,
    SOL: 0.01,
    TRX: 1000,
    DOGE: 7,
};

const EXCHANGE_RATE_API = 'https://min-api.cryptocompare.com/data/price';

const ExchangePage = () => {
    const navigate = useNavigate();
    const location = useLocation();

    const [fromCoin, setFromCoin] = useState(coins[0]);
    const [toCoin, setToCoin] = useState(coins[1]);
    const [amount, setAmount] = useState(0);
    const [result, setResult] = useState(0);
    const [exchangeRate, setExchangeRate] = useState(0);


    const handleAmountChange = (event) => {
        const value = event.target.value;
        if (value >= 0) {
            setAmount(value);
            updateResult(value);
        }
    };

    const handleResultChange = (event) => {
        const value = event.target.value;
        if (value >= 0) {
            setResult(value);
            updateAmount(value);
        }
    };

    const updateResult = (amount) => {
        const url = `${EXCHANGE_RATE_API}?fsym=${fromCoin.symbol}&tsyms=${toCoin.symbol}`;
        fetch(url)
            .then((response) => response.json())
            .then((data) => {
                const exchangeRate = data[toCoin.symbol];
                const resultAmount = amount * exchangeRate;
                setResult(formatNumber(resultAmount));
                setExchangeRate(exchangeRate);
            });
    };

    const updateAmount = (result) => {
        const url = `${EXCHANGE_RATE_API}?fsym=${toCoin.symbol}&tsyms=${fromCoin.symbol}`;
        fetch(url)
            .then((response) => response.json())
            .then((data) => {
                const exchangeRate = data[fromCoin.symbol];
                const amountValue = result * exchangeRate;
                setAmount(formatNumber(amountValue));
                setExchangeRate(1 / exchangeRate);
            });
    };

    const updateExchangeRate = () => {
        const url = `${EXCHANGE_RATE_API}?fsym=${fromCoin.symbol}&tsyms=${toCoin.symbol}`;
        fetch(url)
            .then((response) => response.json())
            .then((data) => {
                const exchangeRate = data[toCoin.symbol];
                setExchangeRate(exchangeRate);
            });
    };

    // Функция для форматирования числа (удаление лишних нулей)
    const formatNumber = (value) => {
        const num = Number(value);
        if (isNaN(num)) return 0; // Если значение не число, возвращаем 0
        return num.toFixed(8).replace(/\.?0+$/, ''); // Убираем лишние нули после запятой
    };

    const handleFromCoinChange = useCallback(() => {
        navigate('/coinlist', {
            state: {
                type: 'exchange',
                coinFrom: fromCoin,
                coinTo: toCoin,
                isFrom: true,
            },
        });
    }, [toCoin, navigate]);

    const handleToCoinChange = useCallback(() => {
        navigate('/coinlist', {
            state: {
                type: 'exchange',
                coinFrom: fromCoin,
                coinTo: toCoin,
                isFrom: false,
            },
        });
    }, [fromCoin, navigate]);

    useEffect(() => {
        if (location.state && location.state.coinFrom && location.state.coinTo) {
            console.log(location.state);
            const selectedCoin = coins.find((coin) => coin.symbol === location.state.currency);
            if (selectedCoin) {
                if (location.state.isFrom) {
                    setFromCoin(selectedCoin);
                    setToCoin(location.state.coinTo);
                } else {
                    setToCoin(selectedCoin);
                    setFromCoin(location.state.coinFrom);
                }
            }
        }
    }, [location.state, coins]);


    useEffect(() => {
        updateResult(amount);
        const intervalId = setInterval(updateExchangeRate, 1000);
        return () => clearInterval(intervalId);
    }, [fromCoin, toCoin]);

    return (
        <div className="flex h-screen">
            <div className="text-white flex flex-col justify-between m-10">
                <div className="p-4 mt-28">
                    <div className="flex justify-between items-center mb-4 space-y-16">
                        <span className="text-5xl">Вы отправляете</span>
                        <div className="flex items-center space-x-4 text-4xl">
                            <i className="far fa-credit-card text-gray-400"></i>
                            <span className="text-gray-400 font-bold">{userBalances[fromCoin.symbol]}</span>
                            <span
                                className="text-blue-400 font-semibold cursor-pointer"
                                onClick={() =>{ setAmount(userBalances[fromCoin.symbol]);
                                                        handleAmountChange({ target: { value: userBalances[fromCoin.symbol] } });
                                                        }}
                            >
                            МАКС
                            </span>
                        </div>
                    </div>
                    <div className="flex justify-between items-center mb-16">
                    <div className="flex items-center space-x-4"
                             onClick={handleFromCoinChange}>
                            <img alt={fromCoin.name} className="w-32 h-32" src={fromCoin.logo}/>
                            <span className="text-5xl">{fromCoin.symbol}</span>
                            <i className="fas fa-chevron-right"></i>
                        </div>
                        <input
                            type="number"
                            value={amount}
                            onChange={handleAmountChange}
                            className="font-bold w-full bg-transparent py-4 pl-10 text-right text-7xl"
                            placeholder="0"
                            min="0"
                            style={{
                                color: 'gray', // Цвет текста как у фона
                                caretColor: 'gray', // Цвет курсора как у фона
                                WebkitAppearance: 'none', // Убираем стрелочки в Safari
                                MozAppearance: 'textfield',
                                outline: 'none', // Убираем стрелочки в Firefox
                            }}
                        />
                    </div>
                    {amount > userBalances[fromCoin.symbol] ? (
                        <div className="text-red-500 text-4xl mt-4 text-right mb-8">
                            Недостаточный баланс. <span
                            className="text-blue-500 cursor-pointer"
                            onClick={() =>
                                navigate('/deposit', {
                                    state: { currency: fromCoin.symbol },
                                })
                            }
                        >
                        Пополнить
                        </span>
                        </div>
                    ) : (<div></div>
                    )}
                    <div className="flex justify-center items-center mb-4">
                        <div className="w-full border-t border-gray-700"></div>
                        <i
                            className="fas fa-exchange-alt rotate-90 text-5xl opacity-50 mx-4"
                            onClick={() => {
                                const tempCoin = fromCoin;
                                setFromCoin(toCoin);
                                setToCoin(tempCoin);
                            }}
                        ></i>
                        <div className="w-full border-t border-gray-700"></div>
                    </div>
                    <div className="flex justify-between items-center mb-12">
                    <span className="text-5xl">Вы получаете</span>
                    </div>
                    <div className="flex justify-between items-center">
                        <div className="flex items-center space-x-4"
                             onClick={handleToCoinChange}>
                            <img alt={toCoin.name} className="w-32 h-32" src={toCoin.logo} />
                            <span className="text-5xl">{toCoin.symbol}</span>
                            <i className="fas fa-chevron-right"></i>
                        </div>
                        <input
                            type="number"
                            value={result}
                            onChange={handleResultChange}
                            className="font-bold w-full bg-transparent py-4 pl-10 text-right text-7xl"
                            placeholder="0"
                            min="0"
                            style={{
                                color: 'gray', // Цвет текста как у фона
                                caretColor: 'gray', // Цвет курсора как у фона
                                WebkitAppearance: 'none', // Убираем стрелочки в Safari
                                MozAppearance: 'textfield',
                                outline: 'none', // Убираем стрелочки в Firefox
                            }}
                        />
                    </div>
                    <div className="text-gray-400 text-4xl mt-4 text-right">
                        1 {fromCoin.symbol} ≈ {formatNumber(exchangeRate)} {toCoin.symbol}
                    </div>
                </div>
                <div className="p-4">
                    <button
                        onClick={() => console.log('Продолжить')}
                        className="w-full bg-gradient-to-r from-blue-500 to-blue-700 text-white py-8 rounded-lg text-4xl mt-4"
                    >
                        Продолжить
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ExchangePage;

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useNavigate, useLocation } from 'react-router-dom';

const userBalances = {
    TON: 1,
    USDT: 500,
    NOT: 80,
    BTC: 0.00015,
    ETH: 0.003,
    SOL: 0.01,
    TRX: 1000,
    DOGE: 7,
};

const coins = [
    { id: 1, name: 'Toncoin', logo: './toncoin.png', symbol: 'TON' },
    { id: 2, name: 'Tether', logo: './tether.png', symbol: 'USDT' },
    { id: 3, name: 'Notcoin', logo: './notcoin.png', symbol: 'NOT' },
    { id: 4, name: 'Bitcoin', logo: './bitcoin.png', symbol: 'BTC' },
    { id: 5, name: 'Ethereum', logo: './etherium.png', symbol: 'ETH' },
    { id: 6, name: 'Solana', logo: './solana.png', symbol: 'SOL' },
    { id: 7, name: 'TRON', logo: './tron.png', symbol: 'TRX' },
    { id: 8, name: 'Dogecoin', logo: './dogecoin.png', symbol: 'DOGE' },
];

const currencies = [
    { id: 1, name: 'Российский рубль', symbol: 'RUB', icon: '₽' },
    { id: 2, name: 'Доллар США', symbol: 'USD', icon: '$' },
    { id: 3, name: 'Евро', symbol: 'EUR', icon: '€' },
    { id: 4, name: 'Белорусский рубль', symbol: 'BYN', icon: 'Br' },//не работает
    { id: 5, name: 'Украинская гривна', symbol: 'UAH', icon: '₴' },
    { id: 6, name: 'Британский фунт', symbol: 'GBP', icon: '£' },
    { id: 7, name: 'Китайский юань', symbol: 'CNY', icon: '¥' },//не работает
    { id: 8, name: 'Казахстанский тенге', symbol: 'KZT', icon: '₸' },
    { id: 9, name: 'Узбекский сум', symbol: 'UZS', icon: 'сум' },//не работает
    { id: 10, name: 'Грузинский лари', symbol: 'GEL', icon: '₾' },
    { id: 11, name: 'Турецкая лира', symbol: 'TRY', icon: '₺' },
    { id: 12, name: 'Армянский драм', symbol: 'AMD', icon: '֏' },//не работает
    { id: 13, name: 'Таиландский бат', symbol: 'THB', icon: '฿' },
    { id: 14, name: 'Индийская рупия', symbol: 'INR', icon: '₹' },
    { id: 15, name: 'Бразильский реал', symbol: 'BRL', icon: 'R$' },
    { id: 16, name: 'Индонезийская рупия', symbol: 'IDR', icon: 'Rp' },
    { id: 17, name: 'Азербайджанский манат', symbol: 'AZN', icon: '₼' },//не работает
    { id: 18, name: 'Объединенные Арабские Эмираты дирхам', symbol: 'AED', icon: 'د.إ' },
    { id: 19, name: 'Польский злотый', symbol: 'PLN', icon: 'zł' },
    { id: 20, name: 'Израильский шекель', symbol: 'ILS', icon: '₪' },
    { id: 21, name: 'Киргизский сом', symbol: 'KGS', icon: 'с' },//не работает
    { id: 22, name: 'Таджикский сомони', symbol: 'TJS', icon: 'ЅМ' },//не работает
];

const api_url = 'https://min-api.cryptocompare.com';

const getCoinPrice = async (coin_id, currency) => {
    try {
        const response = await axios.get(`${api_url}/data/price`, {
            params: {
                fsym: coin_id,
                tsyms: currency,
            },
        });
        const data = response.data;
        const price = data[currency];
        if (price === undefined) {
            const priceFromCoincap = await getCoinPriceFromCoincap(coin_id, currency);
            return priceFromCoincap;
        }
        return price;
    } catch (error) {
        console.error(error);
    }
};

const getCoinPriceChange = async (coin_id, currency) => {
    try {
        const response = await axios.get(`${api_url}/data/histohour`, {
            params: {
                fsym: coin_id,
                tsym: currency,
                limit: 24,
            },
        });
        const data = response.data;
        const prices = data.Data;
        const currentPrice = prices[prices.length - 1].close;
        const previousPrice = prices[prices.length - 2].close;
        const priceChange = (currentPrice - previousPrice) / previousPrice * 100;
        return priceChange;
    } catch (error) {
        console.error(error);
    }
};

const getCoinPriceFromCoincap = async (coin_id, currency) => {
    try {
        const response = await axios.get(`https://api.coincap.io/v2/rates`);
        const data = response.data;
        const coin = data.data.find((coin) => coin.symbol === coin_id);
        const price = coin.rateUsd;
        return price;
    } catch (error) {
        console.error(error);
    }
};

function Home() {
    const [prices, setPrices] = useState({});
    const [priceChanges, setPriceChanges] = useState({});
    const [currentCurrency, setCurrentCurrency] = useState('USD');
    const [hideSmallBalances, setHideSmallBalances] = useState(false); // Состояние для фильтра
    const [hideAmounts, setHideAmounts] = useState(false); // Состояние для отображения сумм валют пользователя

    const toggleHideAmounts = () => {
        setHideAmounts((prev) => !prev); // Переключаем состояние отображения сумм валют пользователя
    };

    const navigate = useNavigate();
    const location = useLocation();

    useEffect(() => {
        if (location.state?.currentCurrency) {
            setCurrentCurrency(location.state.currentCurrency);
        }
    }, [location.state?.currentCurrency]);

    const handleCoinList = (type) => {
        navigate('/coinlist', {
            state: {
                type: type
            },
        });
    };

    const handleCurrencySelect = () => {
        navigate('/currency',
            { state: { currentCurrency: currentCurrency } });
    };

    const toggleHideSmallBalances = () => {
        setHideSmallBalances((prev) => !prev); // Переключаем состояние фильтра
    };

    useEffect(() => {
        const intervalId = setInterval(() => {
        const getPrices = async () => {
            const prices = {};
            const priceChanges = {};
            for (const coin of coins) {
                const price = await getCoinPrice(coin.symbol, currentCurrency);
                prices[coin.symbol] = price;
                const priceChange = await getCoinPriceChange(coin.symbol, currentCurrency);
                priceChanges[coin.symbol] = priceChange;
            }
            setPrices(prices);
            setPriceChanges(priceChanges);
        };
        getPrices();
    }, 1000);
        return () => {
            clearInterval(intervalId);
        };
    }, [currentCurrency]);

    const filteredCoins = hideSmallBalances
        ? coins.filter((coin) => {
            return userBalances[coin.symbol] > 0; // Показываем только монеты с балансом больше 0
        })
        : coins;

    return (
        <div>
            <div className="relative text-right p-2 mt-10">
                <button className="text-gray-400 hover:text-blue-400 focus:outline-none text-5xl">
                    <i className="fas fa-cog text-5xl"></i>
                </button>
            </div>
            <div className="p-4 mt-40">
                <div className="flex items-center justify-center mb-12">
                    <div className="text-center">
                        <div className="text-7xl font-bold mb-4">
                            {hideAmounts ? (
                                `${currencies.find(c => c.symbol === currentCurrency).icon} ***`
                            ) : (
                                Object.keys(prices).length === Object.keys(userBalances).length ? (
                                    `${currencies.find(c => c.symbol === currentCurrency).icon} ${Object.keys(userBalances).reduce((acc, symbol) => acc + userBalances[symbol] * prices[symbol], 0).toLocaleString('en-US', {
                                        minimumFractionDigits: 2,
                                        maximumFractionDigits: 2
                                    })}`
                                ) : (
                                    'Loading...'
                                )
                            )}
                            <i className={`fas ${hideAmounts ? 'fa-eye-slash' : 'fa-eye'} text-white opacity-50 pl-5`}
                               onClick={toggleHideAmounts}></i>
                        </div>
                        <div className="text-gray-400 text-3xl" onClick={handleCurrencySelect}>
                            Общий баланс в <span className="text-blue-400">{currentCurrency}</span>
                        </div>
                    </div>
                </div>
                <div className="flex flex-col md:flex-row justify-around gap-8 mb-12 mt-20">
                    <div className="text-center flex flex-col items-center">
                        <div
                            className="bg-gradient-to-r from-blue-500 to-blue-700 rounded-full w-24 h-24 flex items-center justify-center mb-2"
                            onClick={() => handleCoinList('deposit')}>
                            <i className="fas fa-arrow-down text-white text-3xl"></i>
                        </div>
                        <div className="text-blue-500 font-bold text-3xl">Пополнить</div>
                    </div>
                    <div className="text-center flex flex-col items-center mr-3">
                        <div className="bg-gradient-to-r from-blue-500 to-blue-700 rounded-full w-24 h-24 flex items-center justify-center mb-2"
                             onClick={() => handleCoinList('withdraw')}>
                            <i className="fas fa-arrow-up text-white text-3xl"></i>
                        </div>
                        <div className="text-blue-500 font-bold text-3xl">Вывести</div>
                    </div>
                    <div className="text-center flex flex-col items-center mr-8">
                        <div className="bg-gradient-to-r from-blue-500 to-blue-700 rounded-full w-24 h-24 flex items-center justify-center mb-2"
                             onClick={() => navigate('/exchange')}>
                            <i className="fas fa-exchange-alt text-white text-3xl"></i>
                        </div>
                        <div className="text-blue-500 font-bold text-3xl">Обмен</div>
                    </div>
                    <div className="text-center flex flex-col items-center">
                        <div className="bg-gradient-to-r from-blue-500 to-blue-700 rounded-full w-24 h-24 flex items-center justify-center mb-2"
                            >
                            <i className="fas fa-sync-alt text-white text-3xl"></i>
                        </div>
                        <div className="text-blue-500 font-bold text-3xl">P2P</div>
                    </div>
                </div>
                <div className="ml-4 mr-4 mb-6 mt-40">
                    <div className="flex justify-between text-gray-400 text-3xl">
                        <div>АКТИВЫ</div>
                        <div className="text-blue-400" onClick={toggleHideSmallBalances}>
                            {hideSmallBalances ? 'Показать все' : 'СКРЫТЬ МЕЛКИЕ БАЛАНСЫ'}
                        </div>
                    </div>
                </div>
                <div className="ml-4 mr-4 mt-10">
                    <div className="flex flex-col">
                        {filteredCoins.map((coin, index) => (
                            <div>
                                <div key={coin.id} className="flex items-center justify-between mb-8">
                                <div className="flex items-center">
                                    <div className="rounded-full w-24 h-24 flex items-center justify-center mr-4">
                                        <img alt={`${coin.name} logo`} className="w-24 h-24" src={coin.logo}/>
                                    </div>
                                    <div>
                                        <div className="flex justify-between items-center">
                                            <div className="text-4xl">{coin.name}</div>
                                        </div>
                                        <div className="text-gray-400 text-3xl">
                                            {prices[coin.symbol] !== undefined && priceChanges[coin.symbol] !== undefined ? (
                                                <span>
                                                    {currencies.find(c => c.symbol === currentCurrency).icon} {prices[coin.symbol].toLocaleString('en-US', {
                                                        minimumFractionDigits: 2,
                                                        maximumFractionDigits: 2
                                                    })}{' '}
                                                    <span
                                                        className={priceChanges[coin.symbol] === 0 ? 'text-gray-500' : (priceChanges[coin.symbol] > 0 ? 'text-green-500' : 'text-red-500')}>
                                                        {priceChanges[coin.symbol] > 0 ? '+' : ''}{priceChanges[coin.symbol].toFixed(2)}%
                                                    </span>
                                                </span>
                                            ) : (
                                                'Loading...'
                                            )}
                                        </div>
                                    </div>
                                </div>
                                    <div className="text-right">
                                        <div
                                            className="text-4xl">{hideAmounts ? '***' : (userBalances[coin.symbol] === 0 ? '0' : userBalances[coin.symbol].toLocaleString('en-US', {
                                            minimumFractionDigits: 0,
                                            maximumFractionDigits: 7
                                        }))} {coin.symbol}</div>
                                        <div className="text-gray-400 text-3xl">
                                            {hideAmounts ? '***' : `${currencies.find(c => c.symbol === currentCurrency).icon} ${userBalances[coin.symbol] * prices[coin.symbol] !== undefined ? (userBalances[coin.symbol] * prices[coin.symbol]).toLocaleString('en-US', {
                                                minimumFractionDigits: 2,
                                                maximumFractionDigits: 2
                                            }) : 'Loading...'}`}
                                        </div>
                                    </div>
                                </div>
                                {index < coins.length - 1 &&
                                    <div className="border-b border-gray-600 opacity-50 mb-4 ml-28 "></div>}
                            </div>
                        ))}
                    </div>
                </div>
            </div>
        </div>
    );
}

export default Home;

import React from 'react';

// Массив с данными о криптовалютах
const coins = [
    { id: 1, name: 'Toncoin', logo: './toncoin.png', symbol: 'TON' },
    { id: 2, name: 'Tether', logo: './tether.png', symbol: 'USDT' },
    { id: 3, name: 'Notcoin', logo: './notcoin.png', symbol: 'NOT' },
    { id: 4, name: 'Bitcoin', logo: './bitcoin.png', symbol: 'BTC' },
    { id: 5, name: 'Ethereum', logo: './etherium.png', symbol: 'ETH' },
    { id: 6, name: 'Solana', logo: './solana.png', symbol: 'SOL' },
    { id: 7, name: 'TRON', logo: './tron.png', symbol: 'TRX' },
    { id: 8, name: 'Dogecoin', logo: './dogecoin.png', symbol: 'DOGE' },
];

// Константы для минимального вывода и баланса пользователя
const MIN_WITHDRAWAL = {
    TON: 0.09,
    USDT: 1,
    NOT: 80,
    BTC: 0.00015,
    ETH: 0.003,
    SOL: 0.01,
    TRX: 10,
    DOGE: 7,
};

const userBalances = {
    TON: 0,
    USDT: 0.5,
    NOT: 80,
    BTC: 0.00015,
    ETH: 0.003,
    SOL: 0.01,
    TRX: 5,
    DOGE: 6,
};

const InsufficientFundsPage = ({ currency }) => {
    // Находим данные о выбранной валюте
    const selectedCoin = coins.find(coin => coin.symbol === currency);

    // Если валюта не найдена, возвращаем null или сообщение об ошибке
    if (!selectedCoin) {
        return <div>Валюта не найдена</div>;
    }

    return (
        <div className="text-white flex flex-col items-center justify-center mt-52">
            {/* Логотип выбранной валюты */}
            <img alt={`${selectedCoin.name} logo`} className="w-56 h-56" src={selectedCoin.logo} />
            <div className="text-center flex flex-col items-center w-full pl-20 pr-20 pt-12 pb-20 mb-96">
                {/* Заголовок с названием валюты */}
                <h1 className="text-6xl font-bold mb-16 max-w-3xl">
                    Недостаточно {selectedCoin.name} для вывода
                </h1>
                <div className="bg-gray-800 rounded-3xl p-6 mb-6 w-full text-3xl space-y-8">
                    {/* Баланс пользователя */}
                    <div className="flex justify-between mb-2 text-gray-400">
                        <span>Баланс</span>
                        <span className="text-red-500">
                            {userBalances[currency]} {currency}
                        </span>
                    </div>
                    <div className="border-b border-gray-600 opacity-30"></div>
                    {/* Минимальный вывод */}
                    <div className="flex justify-between mb-2">
                        <span className="text-gray-400">Вывод от</span>
                        <span>
                            {MIN_WITHDRAWAL[currency]} {currency}
                        </span>
                    </div>
                    <div className="border-b border-gray-600 opacity-30"></div>
                    {/* Комиссия */}
                    <div className="flex justify-between pb-2">
                        <span className="text-gray-400">Комиссия</span>
                        <span>
                            {MIN_WITHDRAWAL[currency]} {currency}
                        </span>
                    </div>
                </div>
                {/* Описание */}
                <p className="text-gray-400 mb-6 text-3xl mt-8 max-w-xl">
                    Комиссии и лимиты для {selectedCoin.name} в сети TON.
                </p>
            </div>
            {/* Кнопка "Назад" */}
            <div className="p-4 w-full mt-48">
                <button
                    className="w-full bg-gradient-to-r from-blue-500 to-blue-700 text-white py-6 px-6 rounded-xl min-w-96 text-3xl">
                    Назад
                </button>
            </div>
        </div>
    );
};

export default InsufficientFundsPage;

import React, { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import InsufficientFundsPage from "./InsufficientFundsPage";

// Константы
const MIN_WITHDRAWAL = {
    BTC: 0.00015,
    ETH: 0.003,
    DOGE: 7,
    SOL: 0.01,
    TRX: 10,
    TON: 0.09,
    NOT: 80,
    USDT: 1,
};

const userBalances = {
    TON: 1,
    USDT: 0.5,
    NOT: 80,
    BTC: 0.00015,
    ETH: 0.003,
    SOL: 0.01,
    TRX: 500,
    DOGE: 6,
};

const EXCHANGE_RATE_API = 'https://min-api.cryptocompare.com/data/price';


const WithdrawPage = () => {
    const location = useLocation();
    const { currency } = location.state || {};
    const [amount, setAmount] = useState(userBalances[currency] || 0);
    const [exchangeRate, setExchangeRate] = useState(0);
    const [address, setAddress] = useState('UQC4JF09v...gLKHBriv');
    const [isAddressEnabled, setAddressEnabled] = useState(false);

    const handleAddressChange = (e) => {
        setAddress(e.target.value);
    };

    useEffect(() => {
        const fetchExchangeRate = async () => {
            const response = await fetch(`${EXCHANGE_RATE_API}?fsym=${currency}&tsyms=USD`);
            const data = await response.json();
            setExchangeRate(data.USD);
        };
        fetchExchangeRate();
    }, [currency]);

    const handleMaxClick = () => {
        // Рассчитываем максимально возможную сумму вывода
        const maxAmount = userBalances[currency];
        setAmount(parseFloat(maxAmount).toFixed(8));
    };

    const [isValidAmount, setIsValidAmount] = useState(true);

    const handleAmountChange = (e) => {
        const value = e.target.value;
        setAmount(value);
        // Ограничиваем ввод до 9 знаков, не выше максимума и не ниже 0
        if (value.length <= 9 && parseFloat(value) >= 0 && parseFloat(value) <= userBalances[currency]) {
            setIsValidAmount(true);
        } else {
            setIsValidAmount(false);
        }
    };

    if (userBalances[currency] < MIN_WITHDRAWAL[currency]) {
        return <InsufficientFundsPage currency={currency}/>;
    }

    return (
        <div className="text-white flex flex-col items-center justify-center mt-52">
            <div className="text-center flex flex-col items-center w-full pl-20 pr-20 pt-12 pb-20 mb-96">
                <div className="bg-gray-800 rounded-3xl pb-0 p-6 mb-6 w-full text-3xl space-y-8 space-x-8">
                    <div className="flex justify-between mb-2 ">
                        <div
                            className="rounded-full w-16 h-16 flex items-center justify-center bg-gradient-to-r from-blue-500 to-blue-700 ml-8">
                            <i className="fas fa-arrow-up text-white text-4xl mr-8 pl-8"></i>
                        </div>
                        <div className="flex justify-end w-full ml-4">
                            <span className="text-white text-4xl mr-4 mt-4">
                                Отправить:
                            </span>
                            <input
                                type="text"
                                disabled={isAddressEnabled}
                                value={address.length > 10 ? address.slice(0, 5) + '...' + address.slice(-10) : address}
                                onChange={handleAddressChange}
                                className="text-gray-400 text-4xl mr-20 mt-4 w-full bg-transparent outline-none appearance-none"
                                style={{
                                    color: 'inherit', // Цвет текста как у фона
                                    WebkitAppearance: 'none', // Убираем стрелочки в Safari
                                    MozAppearance: 'textfield', // Убираем стрелочки в Firefox
                                }}
                            />
                            <i className="fas fa-pencil-alt text-blue-400 text-4xl pt-4 pr-4"
                            onClick={() => setAddressEnabled(!isAddressEnabled)}></i>
                        </div>
                    </div>
                    <div className="border-b border-gray-600 opacity-30"></div>
                    <div className="flex justify-between mb-2">
                        <span className="text-gray-400 text-4xl">Вывести</span>
                    </div>
                    <div className="flex">
                        <input
                            type="number"
                            value={amount}
                            onChange={handleAmountChange}
                            min="0"
                            className="text-gray-400 text-8xl font-bold w-full bg-transparent outline-none appearance-none"
                            style={{
                                color: 'inherit', // Цвет текста как у фона
                                WebkitAppearance: 'none', // Убираем стрелочки в Safari
                                MozAppearance: 'textfield', // Убираем стрелочки в Firefox
                            }}
                        />
                        <span className="text-gray-400 text-4xl pt-12 pl-6">{currency}</span>
                    </div>
                    <div className="flex pb-8">
                        <span className="text-gray-400 text-3xl">Мин {MIN_WITHDRAWAL[currency]} - Макс {userBalances[currency]}</span>
                        <div className="flex items-center space-x-4 ml-auto">
                            <button
                                className="text-blue-400 text-3xl pr-8"
                                onClick={handleMaxClick}
                            >
                                МАКС
                            </button>
                        </div>
                    </div>
                </div>
                <div className="bg-gray-800 rounded-3xl pb-4 p-6 mb-6 w-full text-4xl space-y-4">
                    <div className="flex justify-between text-gray-400 space-x-8">
                        <span className="ml-8">Сумма</span>
                    </div>
                    <div className="flex justify-between text-4xl ml-8">
                        ≈ {amount * exchangeRate} USD
                    </div>
                    <div className="border-b border-gray-600 opacity-30"></div>
                    <div className="flex justify-between pb-2">
                        <span className="text-gray-400 ml-8">Комиссия</span>
                    </div>
                    <div className="flex justify-between pb-4 ml-8 text-4xl">
                        <span>{MIN_WITHDRAWAL[currency]} {currency}</span>
                        <span className="text-gray-400">≈ ${(MIN_WITHDRAWAL[currency] * exchangeRate).toFixed(2)}</span>
                    </div>
                </div>
                <div className="bg-gray-800 rounded-3xl p-6 mb-6 w-full text-3xl space-y-8">
                    <div className="flex justify-between text-gray-400">
                        <button className="text-blue-400 text-4xl px-6 rounded-xl flex items-center space-x-2">
                            <i className="far fa-comment-alt mr-4 mt-2 text-5xl"></i>
                            Добавить комментарий
                        </button>
                    </div>
                </div>
            </div>
            <div className="p-4 w-full mt-32">
                <button className="w-full bg-gradient-to-r from-blue-500 to-blue-700 text-white py-6 px-6 rounded -xl min-w-96 text-3xl"
                        disabled={!isValidAmount}>
                    Отправить
                </button>
            </div>
        </div>
    );
};

export default WithdrawPage;