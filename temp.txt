-- Create coins table
CREATE TABLE IF NOT EXISTS coins (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  symbol VARCHAR(20) NOT NULL UNIQUE,
  logo VARCHAR(255),
  network VARCHAR(50),
  coingecko_id VARCHAR(100)
);

-- Create currencies table
CREATE TABLE IF NOT EXISTS currencies (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  symbol VARCHAR(10) NOT NULL UNIQUE,
  description TEXT,
  icon VARCHAR(10)
);

-- Create users table
CREATE TABLE IF NOT EXISTS users (
  id SERIAL PRIMARY KEY,
  telegram_id BIGINT UNIQUE,
  created_at TIMESTAMP DEFAULT NOW()
);

-- Create user balances table
CREATE TABLE IF NOT EXISTS user_balances (
  user_id INTEGER REFERENCES users(id),
  coin_id INTEGER REFERENCES coins(id),
  balance DECIMAL(24, 8) DEFAULT 0,
  PRIMARY KEY (user_id, coin_id)
);

-- Create transactions table
CREATE TABLE IF NOT EXISTS transactions (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id),
  coin_id INTEGER REFERENCES coins(id),
  amount DECIMAL(24, 8) NOT NULL,
  type VARCHAR(20) NOT NULL,
  status VARCHAR(20) DEFAULT 'completed',
  timestamp TIMESTAMP DEFAULT NOW(),
  tx_hash VARCHAR(255)
);

-- Create exchange rates table
CREATE TABLE IF NOT EXISTS exchange_rates (
  from_coin_id INTEGER REFERENCES coins(id),
  to_coin_id INTEGER REFERENCES coins(id),
  rate DECIMAL(24, 8) NOT NULL,
  last_updated TIMESTAMP DEFAULT NOW(),
  PRIMARY KEY (from_coin_id, to_coin_id)
);

у меня есть файл api.js, который отражает запросы к серверу и заготовки и файлы сервера, давай доработаем его до конечно работающего бэкенда и соединим через апи, начнем с функций которые не взаимодействуют с блокчейном, а только с базой данных или кэшем. Можешь не использовать все файлы и сказать, которые абсолютно не нужны